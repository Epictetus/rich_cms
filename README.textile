
h1. Rich-CMS

A Rails gem (and also plugin) for a pluggable CMS frontend

h2. Introduction

Rich-CMS is a module of E9s ("http://github.com/archan937/e9s":http://github.com/archan937/e9s) which provides a frontend for your CMS content.

h2. Installation

h3. Using Rich-CMS as gem in Rails 3

Add Rich-CMS in @Gemfile@ as a gem dependency:

<pre>
  gem "rich_cms"
</pre>

Run the following in your console to install with Bundler:

<pre>
  bundle install
</pre>

h3. Using Rich-CMS as gem in Rails 2

Add Rich-CMS in @environment.rb@ as a gem dependency:

<pre>
  config.gem "rich_cms"
</pre>

Run the following in your console:

<pre>
  sudo rake gems:install
</pre>

h3. Using Rich-CMS as plugin in Rails 3

<pre>
  rails plugin install git://github.com/archan937/rich_cms.git
</pre>

h3. Using Rich-CMS as plugin in Rails 2

<pre>
  script/plugin install git://github.com/archan937/rich_cms.git
</pre>

h2. Use the provided Rails generators

Rich-CMS requires two entities:

* An @Authlogic@ authenticated user model
* An @ActiveRecord@ model used for CMS content storage

Fortunately, Rich-CMS is provided with two Rails generators with which you can generate both entities.

h3. Authlogic user

h4. In Rails 3

Run the following in your console:

<pre>
  rails g rich:authlogic_user -m
</pre>

*Note*: At default, it will create both the @User@ and @UserSession@ classes and @CreateUsers@ migration. You can alter the class names with the following:

<pre>
  rails g rich:authlogic_user CodeHeroes::User -m
</pre>

*Note*: Both generators have the @-m@ or @--migrate@ option which runs @rake db:migrate@ after creating the files.

h4. In Rails 2

Run the following in your console:

<pre>
  script/generate rich_authlogic_user -m
</pre>

h3. CMS content

h4. In Rails 3

Run the following in your console:

<pre>
  rails g rich:cms_content -m
</pre>

*Note*: At default, it will create the @CmsContent@ model and @CreateCmsContents@ migration. You can alter the class name with the following:

<pre>
  rails g rich:cms_content CmsItem -m
</pre>

h4. In Rails 2

Run the following in your console:

<pre>
  script/generate rich_cms_content -m
</pre>

In case you have used the Rails generators, you can skip the *Create required entities manually* section and go straight to *Render Rich-CMS in your views*.

h2. Create required entities manually

h3. Specify the authentication mechanism

Provide the mechanism as a symbol (e.g. @:authlogic@) and the authenticated class along with the attribute used to identify the instance in a hash.

<pre>
  Rich::Cms::Engine.authenticate(:authlogic, {:class_name => "User", :identifier => :email})
</pre>

Unfortunately, only AuthLogic ("http://github.com/binarylogic/authlogic":http://github.com/binarylogic/authlogic) is supported, but we are working hard on making Rich-CMS compatible with other mechanisms.

h3. Register CMS content

Every type of content is identified with its correspending CSS selector (used by the jQuery based Javascript module of Rich-CMS). You will have to provide some specifications:

* @:class_name@ - The class of the CMS content model which contain the data

The following specifications are optional as Rich-Cms uses defaults:

* @:key@ (default: @:key@) - The key used for identification of content. You can also provide an array for a combined key (e.g. @[:key, :locale]@)
* @:value@ (default: @:value@) - The attribute which stores the value of the content instance.
* @:tag@ (default: @:div@) - The HTML tag used for content items.
* @:add@ (default: @[]@) - An array of the content item attributes included within the HTML attributes.
* @:before_edit@ (default: @nil@) - Javascript function called before showing the edit form of a content item.
* @:after_update@ (default: @Rich.Cms.Editor.afterUpdate@) - Javascript function called after update a content item.

<pre>
  Rich::Cms::Engine.register(".cms_content", {:class_name => "Cms::StaticContent"})
  Rich::Cms::Engine.register(".i18n"       , {:class_name => "Translation", :key => [:key, :locale], :before_edit => "Rich.I18n.beforeEdit", :after_update => "Rich.I18n.afterUpdate"})
</pre>

h2. Render Rich-CMS in your views

h3. Alter your layout

Add the following line at the beginning of the @<body>@ tag:

<pre>
  <body>
    <%= rich_cms %>
    ...
  </body>
</pre>

h3. Use the Rich-CMS helper method

Rich-CMS requires a rendered DOM element provided with meta data of the content instance. Fortunately, you can call a method provided by Rich-CMS. Just specify the identifier of the content type and the key of the CMS content instance in question:

<pre>
  >> key = "test_content"
  => "test_content"
  >> Rich::Cms::Engine.to_content_tag(".cms_content", key)
  => "<div class='cms_content' data-key='test_content' data-value='Hello world!'>Hello world!</div>"
</pre>

When using a combined key for content identification, just call it as follows:

<pre>
  >> Rich::Cms::Engine.to_content_tag(".cms_content", {:key => key, :locale => I18n.locale})
  => "<div class='cms_content' data-key='test_content' data-locale='nl' data-value='Hallo wereld!'>Hallo wereld!</div>"
</pre>

*Note*: In this case, the content was registered with @Rich::Cms::Engine.register(".cms_content", {:class_name => "Cms::StaticContent", :key => [:key, :locale]})@

We have also provided you a helper method to render Rich-CMS content tags. It is provided with several options:

* @:as@ (default: auto-determine @:string@ or @:text@) - Specify the input type shown in the edit form (@:string@ for an input text, @:text@ for a textarea and @:html@ for a WYSIWYG HTML editor).
* @:tag@ (default: auto-determine @:div@ or @:span@) - The HTML tag used for content items.
* @:html@ (default: @{}@) - HTML attributes added to the content tag (e.g. @:id@, @:class@)

<pre>
  ...
  <%= rich_cms_tag ".cms_content", "test_content", :as => :html %>
  <%= rich_cms_tag ".cms_content", {:key => "test_content", :locale => I18n.locale} %>
  ...
</pre>

h3. Rich-CMS in your browser

Open "http://localhost:3000/cms":http://localhost:3000/cms, log in and start managing CMS content.

h2. Customizing the after update implementation

The @update@ action response of @Rich::CmsController@ is provided with "JSON":http://www.json.org data regarding the updated content item. The response will be passed to the @after_update@ Javascript function. Its default JSON data:

<pre>
  {"__selector__": ".cms_content", "__identifier__": {"key": "test_paragraph"}, "value": "Hello world!"}
</pre>

*Note*: @__selector__@ and @__identifier__@ are *always* provided in the JSON data.

When specifying a custom after update Javascript function, you probably want to acquire more information than provided in the default JSON data. You can customize this by defining the @to_rich_cms_response@ method in the CMS content model class:

<pre>
  class Translation < ActiveRecord::Base

    def to_rich_cms_response(params)
      {:value => value, :translations => Hash[*params[:derivative_keys].split(";").uniq.collect{|x| [x, x.t]}.flatten]}
    end

  end
</pre>

The JSON data provided will be look like:

<pre>
  {"__selector__": ".i18n", "__identifier__": {"locale": "nl", "key": "word.user"}, "value": "gebruiker", "translations": {"users": "gebruikers"}}
</pre>

h2. Contact me

For support, remarks and requests please mail me at "paul.engel@holder.nl":mailto:paul.engel@holder.nl.

h2. Credit

This Rails gem / plugin depends on:

jQuery<br>
"http://jquery.com":http://jquery.com

AuthLogic<br>
"http://github.com/binarylogic/authlogic":http://github.com/binarylogic/authlogic

Formtastic<br>
"http://github.com/justinfrench/formtastic":http://github.com/justinfrench/formtastic

SASS<br>
"http://sass-lang.com":http://sass-lang.com

Jzip<br>
"http://codehero.es/rails_gems_plugins/jzip":http://codehero.es/rails_gems_plugins/jzip <br>
"http://github.com/archan937/jzip":http://github.com/archan937/jzip

RaccoonTip<br>
"http://codehero.es/jquery_libraries/raccoon_tip":http://codehero.es/jquery_libraries/raccoon_tip <br>
"http://github.com/archan937/raccoon_tip":http://github.com/archan937/raccoon_tip

SeatHolder<br>
"http://codehero.es/jquery_libraries/seat_holder":http://codehero.es/jquery_libraries/seat_holder <br>
"http://github.com/archan937/seat_holder":http://github.com/archan937/seat_holder

CLEditor<br>
"http://premiumsoftware.net/cleditor/index.html":http://premiumsoftware.net/cleditor/index.html

h2. Contributors

Mark Mulder - "@bitterzoet":http://twitter.com/bitterzoet - "http://ikbenbitterzoet.com":http://ikbenbitterzoet.com

h2. ToDo's

* Provide better conventions for content rendering
* Provide tools to use Textile, MarkDown, image files upload and models (e.g. products)
* Provide compatibility with other authentication mechanisms other than AuthLogic
* Add cache feature which uses the standard Rails cache (rich_cms_tag ".cms_content", "test_content", :cache => true)
* Make Rich-CMS compatible with Rails 3

h2. Enrichments

The all-in-one gem at - "http://codehero.es/rails_gems_plugins/e9s":http://codehero.es/rails_gems_plugins/e9s - "http://github.com/archan937/e9s":http://github.com/archan937/e9s

h3. E9s modules

* Rich-CMS <br> "http://codehero.es/rails_gems_plugins/rich_cms":http://codehero.es/rails_gems_plugins/rich_cms <br> "http://github.com/archan937/rich_cms":http://github.com/archan937/rich_cms
* Rich-i18n <br> "http://codehero.es/rails_gems_plugins/rich_i18n":http://codehero.es/rails_gems_plugins/rich_i18n <br> "http://github.com/archan937/rich_i18n":http://github.com/archan937/rich_i18n
* Rich-pluralization <br> "http://codehero.es/rails_gems_plugins/rich_pluralization":http://codehero.es/rails_gems_plugins/rich_pluralization <br> "http://github.com/archan937/rich_pluralization":http://github.com/archan937/rich_pluralization

h2. License

Copyright (c) 2010 Paul Engel, released under the MIT license

"http://holder.nl":http://holder.nl - "http://codehero.es":http://codehero.es - "http://gettopup.com":http://gettopup.com - "http://twitter.com/archan937":http://twitter.com/archan937 - "paul.engel@holder.nl":mailto:paul.engel@holder.nl

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

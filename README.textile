
h1. Rich-CMS

A Rails gem (and also plugin) for a pluggable CMS frontend

h2. Introduction

Rich-CMS is a module of E9s ("http://github.com/archan937/e9s":http://github.com/archan937/e9s) which provides a frontend for your CMS content.

h2. Installation

h3. Using Rich-CMS as gem

Install the Rich-CMS gem:

<pre>
  sudo gem install rich_cms
</pre>

Add rich_cms in @environment.rb@ as a gem dependency:

<pre>
  config.gem "rich_cms"
</pre>

h3. Using Rich-CMS as plugin

Install the Rich-CMS plugin:

<pre>
  ./script/plugin install git://github.com/archan937/rich_cms.git 
</pre>

h2. Usage

h3. Specify the authentication mechanism

Provide the mechanism as a symbol (e.g. @:authlogic@) and the authenticated class along with the attribute used to identify the instance in a hash.

<pre>
  Rich::Cms::Engine.authenticate(:authlogic, {:class_name => "Betty::User", :identifier => :name})
</pre>      

Unfortunately, only AuthLogic ("http://github.com/binarylogic/authlogic":http://github.com/binarylogic/authlogic) is supported, but we are working hard on making Rich-CMS compatible with other mechanisms.

h3. Register CMS content

Every type of content is identified with its correspending CSS selector (used by the jQuery based Javascript module of Rich-CMS). You will have to provide some specifications:

* @:class_name@ - The class of the CMS content model which contain the data

The following specifications are optional as Rich-Cms uses defaults:

* @:key@ (default: @:key@) - The key used for identification of content. You can also provide an array for a combined key (e.g. @[:key, :locale]@)
* @:value@ (default: @:value@) - The attribute which stores the value of the content instance.
* @:tag@ (default: @:span@) - The tag used for content items.
* @:add@ (default: @[]@) - An array of the content item attributes included within the HTML attributes.
* @:before_edit@ (default: @nil@) - Javascript function called before showing the edit form of a content item
* @:after_update@ (default: @Rich.Cms.Editor.afterUpdate@) - Javascript function called after update a content item

<pre>
  Rich::Cms::Engine.register(".betty_cms_content", {:class_name => "Betty::Cms::StaticContent"})
  Rich::Cms::Engine.register(".i18n"             , {:class_name => "Translation", :key => [:key, :locale], :before_edit => "Rich.I18n.beforeEdit", :after_update => "Rich.I18n.afterUpdate"})
</pre>

h3. Customing the after update implementation (with after_update and to_rich_cms_response)

The @update@ action response of @Rich::CmsController@ is provided with "JSON":http://www.json.org data regarding the updated content item. The response will be passed to the @after_update@ Javascript function. Its default JSON data:

<pre>
  {"__selector__": ".betty_cms_content", "__identifier__": {"key": "test_paragraph"}, "value": "Hello world!"}
</pre>

*Note*: @__selector__@ and @__identifier__@ are *always* provided in the JSON data.

When specifying a custom after update Javascript function, you probably want to acquire more information than provided in the default JSON data. You can customize this by defining the @to_rich_cms_response@ method in the CMS content model class:

<pre>
  class Translation < ActiveRecord::Base
  
    def to_rich_cms_response(params)
      {:value => value, :translations => Hash[*params[:derivative_keys].split(";").uniq.collect{|x| [x, x.t]}.flatten]}
    end
  
  end
</pre>

The JSON data provided will be look like:

<pre>
  {"__selector__": ".i18n", "__identifier__": {"locale": "nl", "key": "word.user"}, "value": "gebruiker", "translations": {"users": "gebruikers"}}
</pre>

h3. Render Rich-CMS content within your views

Rich-CMS requires a rendered DOM element provided with meta data of the content instance. Fortunately, you can call a method provided by Rich-CMS. Just specify the identifier of the content type and the key of the CMS content instance in question:

<pre>
  >> key = "test_content"
  => "test_content"
  >> Rich::Cms::Engine.to_content_tag({".betty_cms_content" => key})
  => "<div class='betty_cms_content' data-key='test_content' data-value='Hello world!'>Hello world!</div>"
</pre>

h2. Contact me

For support, remarks and requests please mail me at "paul.engel@holder.nl":mailto:paul.engel@holder.nl.

h2. Credit

This Rails gem / plugin depends on:

jQuery<br>
"http://jquery.com":http://jquery.com

Jzip<br>
"http://github.com/archan937/jzip":http://github.com/archan937/jzip

SASS<br>
"http://sass-lang.com":http://sass-lang.com

Formtastic<br>
"http://github.com/justinfrench/formtastic":http://github.com/justinfrench/formtastic

SeatHolder (optional)<br>
"http://github.com/archan937/seat_holder":http://github.com/archan937/seat_holder

h2. ToDo's

* Complete README.textile (provide documentation about optional features)
* Integrate Rich-CMS in the E9s demo application ("http://github.com/archan937/e9s-demo":http://github.com/archan937/e9s-demo)
* Provide compatibility with other authentication mechanisms other than AuthLogic

h2. License

Copyright (c) 2010 Paul Engel, released under the MIT license

"http://holder.nl":http://holder.nl - "http://codehero.es":http://codehero.es - "http://gettopup.com":http://gettopup.com - "http://twitter.com/archan937":http://twitter.com/archan937 - "paul.engel@holder.nl":mailto:paul.engel@holder.nl

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
